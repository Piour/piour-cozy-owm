// Generated by CoffeeScript 1.4.0
var City, americano, async, http, httpGet;

americano = require('americano-cozy');

module.exports = City = americano.getModel('City', {
  'name': {
    type: String
  },
  'created': {
    type: Date,
    "default": Date
  }
});

http = require("http");

async = require("async");

httpGet = function(url, deflt, callback) {
  var req, result;
  console.log(async);
  result = deflt;
  req = http.get(url, function(res) {
    var chunks, data, length;
    data = '';
    chunks = [];
    length = 0;
    res.on("data", function(chunk) {
      chunks.push(chunk);
      return length += chunk.length;
    });
    return res.on("end", function() {
      data = Buffer.concat(chunks, length);
      result = "";
      if (data.length) {
        result = JSON.parse(data.toString("UTF-8"));
      }
      return callback(result);
    });
  });
  return req.on("error", function() {
    return callback(deflt, "error");
  });
};

City.baseUrl = "http://api.openweathermap.org/data/2.5/";

City.weatherUrl = City.baseUrl + "weather?q=";

City.forecastUrl = City.baseUrl + "forecast/daily?cnt=5&q=";

City.fullCity = function(city, mainCallback) {
  var forecastUrl, fullCity, weatherUrl;
  weatherUrl = City.weatherUrl + city.name;
  forecastUrl = City.forecastUrl + city.name;
  fullCity = {
    id: city.id,
    name: city.name
  };
  return async.series([
    (function(callback) {
      var _this = this;
      return httpGet(weatherUrl, null, function(weather, err) {
        var key, value;
        if (!err) {
          for (key in weather) {
            value = weather[key];
            if (key !== "id") {
              fullCity[key] = value;
            }
          }
        }
        return callback();
      });
    }), (function(callback) {
      var _this = this;
      return httpGet(forecastUrl, null, function(forecast, err) {
        var key, value;
        if (!err) {
          for (key in forecast) {
            value = forecast[key];
            if (key !== "id") {
              fullCity[key] = value;
            }
          }
        }
        return callback(null, fullCity);
      });
    })
  ], function(err, results) {
    return mainCallback(null, fullCity);
  });
};

City.fullCities = function(cities, callback) {
  return async.map(cities, this.fullCity, function(err, results) {
    return callback(err, results);
  });
};

City.all = function(callback) {
  var _this = this;
  return this.request("all", function(err, cities) {
    if (err) {
      return callback.call(_this, err, []);
    } else {
      return _this.fullCities(cities, callback);
    }
  });
};
