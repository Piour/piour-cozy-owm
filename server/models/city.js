// Generated by CoffeeScript 1.4.0
var City, americano, http, httpGet;

americano = require('americano-cozy');

module.exports = City = americano.getModel('City', {
  'name': {
    type: String
  },
  'created': {
    type: Date,
    "default": Date
  }
});

http = require("http");

httpGet = function(url, deflt, callback) {
  var req, result;
  result = deflt;
  req = http.get(url, function(res) {
    var chunks, data, length;
    data = '';
    chunks = [];
    length = 0;
    res.on("data", function(chunk) {
      chunks.push(chunk);
      return length += chunk.length;
    });
    return res.on("end", function() {
      data = Buffer.concat(chunks, length);
      result = JSON.parse(data.toString("UTF-8"));
      return callback(result);
    });
  });
  return req.on("error", function() {
    return callback(deflt, "error");
  });
};

City.baseUrl = "http://api.openweathermap.org/data/2.5/";

City.weatherUrl = City.baseUrl + "weather?q=";

City.forecastUrl = City.baseUrl + "forecast/daily?cnt=5&q=";

City.fullCity = function(city, callback, cities, fullCities) {
  var forecastUrl, fullCity, weatherUrl,
    _this = this;
  weatherUrl = this.weatherUrl + city.name;
  forecastUrl = this.forecastUrl + city.name;
  fullCity = {};
  fullCity.id = city.id;
  fullCity.name = city.name;
  return httpGet(weatherUrl, city, function(weather, err) {
    var key, value;
    if (!err) {
      for (key in weather) {
        value = weather[key];
        if (key !== "id") {
          fullCity[key] = value;
        }
      }
    }
    return httpGet(forecastUrl, fullCity, function(forecast, err) {
      if (!err) {
        for (key in forecast) {
          value = forecast[key];
          if (key !== "id") {
            fullCity[key] = value;
          }
        }
      }
      if (fullCities) {
        fullCities.push(fullCity);
        return _this.fullCities(cities, fullCities, callback);
      } else {
        return callback.send(fullCity);
      }
    });
  });
};

City.fullCities = function(cities, fullCities, callback) {
  var city;
  city = cities.pop();
  if (city) {
    return this.fullCity(city, callback, cities, fullCities);
  } else {
    return callback.call(this, 0, fullCities.reverse());
  }
};

City.all = function(callback) {
  var _this = this;
  return this.request("all", function(err, cities) {
    if (err) {
      return callback.call(_this, err, []);
    } else {
      return _this.fullCities(cities, [], callback);
    }
  });
};
